# Diccionario de los colores por clase de token
colors = {
        "error": "red",
        "numeros": "blue",
        "operadores": "orange",
        "variables": "purple",
        "string": "green",
        "comentarios": "gray",
        "llaves_corchetes": "brown",
        "formato": "black"
    }

    # Diccionario con los colores de cada type de token
color_types = {
        "ERROR": colors["error"],
        "INTEGER": colors["numeros"],
        "REAL": colors["numeros"],
        "ADDITION": colors["operadores"],
        "SUBTRACTION": colors["operadores"],
        "MULTIPLICATION": colors["operadores"],
        "DIVISION": colors["operadores"],
        "ASSIGNMENT": colors["operadores"],
        "MODULE": colors["operadores"],
        "GREATER": colors["operadores"],
        "SMALLER": colors["operadores"],
        "INTEGER_DIVISION": colors["operadores"],
        "POWER": colors["operadores"],
        "RESERVED": colors["variables"],
        "STRING": colors["string"],
        "COMMENT": colors["comentarios"],
        "KEY": colors["llaves_corchetes"],
        "PUNCTUATION": colors["llaves_corchetes"],
        "LINE_JUMP": colors["formato"],
        "SPACE": colors["formato"],
        "TAB": colors["formato"]
    }



# Función para generar la guía de colores en el HTML
def color_guide(colors):
    html_guide = "<div><h2>Guía de Colores</h2><ul>"
    for type, color in colors.items():
        html_guide += f'<li><span style="color: {color};">{type.capitalize()}</span>: {type.capitalize()}</li>'
    html_guide += "</ul></div><hr>"
    return html_guide

# Función para generar el HTML
def html_generator(results, color_types, output_file):
    html_guide = color_guide(colors)
    html_content = "<!DOCTYPE html>\n<html>\n<head>\n<title>Highlighted Code</title>\n</head>\n<body>\n"
    html_content += html_guide
    html_content += "<pre>\n"
    
    for text, type in results:
        color = color_types.get(type, "black") 
        if type == "LINE_JUMP":
            html_content += "<br>"
        elif type == "SPACE":
            html_content += "&nbsp;"
        else:
            html_content += f'<span style="color: {color};">{text}</span>'
    
    html_content += "\n</pre></body>\n</html>"
    # return html_content


    # Se guarda el HTML en un archivo
    with open(output_file, 'w') as file:
        file.write(html_content)


# Resultados a mano para probar el generador de HTML
results = [
    ['\n', 'LINE_JUMP'],
    ['# Este es un comentario inicial', 'COMMENT'],
    ['\n', 'LINE_JUMP'],
    ['def', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['funcion', 'VARIABLE'],
    ['(', 'KEY'],
    ['a', 'VARIABLE'],
    [',', 'PUNCTUATION'],
    ['&nbsp', 'SPACE'],
    ['b', 'VARIABLE'],
    [')', 'KEY'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['if', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['a', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['>', 'OPERADOR'],
    ['&nbsp', 'SPACE'],
    ['b', 'VARIABLE'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['return', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['a', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['-', 'OPERADOR'],
    ['&nbsp', 'SPACE'],
    ['b', 'VARIABLE'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['else', 'RESERVED'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['return', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['b', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['-', 'OPERADOR'],
    ['&nbsp', 'SPACE'],
    ['a', 'VARIABLE'],
    ['\n', 'LINE_JUMP'],
    ['\n', 'LINE_JUMP'],
    ['# Segundo comentario para probar', 'COMMENT'],
    ['\n', 'LINE_JUMP'],
    ['for', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['i', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['in', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['range', 'RESERVED'],
    ['(', 'KEY'],
    ['10', 'INTEGER'],
    [')', 'KEY'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['if', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['i', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['%', 'MODULE'],
    ['&nbsp', 'SPACE'],
    ['2', 'INTEGER'],
    ['&nbsp', 'SPACE'],
    ['==', 'ASSIGNMENT'],
    ['&nbsp', 'SPACE'],
    ['0', 'INTEGER'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['print', 'RESERVED'],
    ['(', 'KEY'],
    ['"Par: "', 'STRING'],
    ['&nbsp', 'SPACE'],
    ['+', 'OPERADOR'],
    ['&nbsp', 'SPACE'],
    ['str', 'RESERVED'],
    ['(', 'KEY'],
    ['i', 'VARIABLE'],
    [')', 'KEY'],
    [')', 'KEY'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['else', 'RESERVED'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['print', 'RESERVED'],
    ['(', 'KEY'],
    ['"Impar: "', 'STRING'],
    ['&nbsp', 'SPACE'],
    ['+', 'OPERADOR'],
    ['&nbsp', 'SPACE'],
    ['str', 'RESERVED'],
    ['(', 'KEY'],
    ['i', 'VARIABLE'],
    [')', 'KEY'],
    [')', 'KEY'],
    ['\n', 'LINE_JUMP'],
    ['\n', 'LINE_JUMP'],
    ['# Tercer comentario', 'COMMENT'],
    ['\n', 'LINE_JUMP'],
    ['try', 'RESERVED'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['x', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['=', 'ASSIGNMENT'],
    ['&nbsp', 'SPACE'],
    ['int', 'RESERVED'],
    ['(', 'KEY'],
    ['"123"', 'STRING'],
    [')', 'KEY'],
    ['\n', 'LINE_JUMP'],
    ['except', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['ValueError', 'VARIABLE'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['print', 'RESERVED'],
    ['(', 'KEY'],
    ['"Valor no es un entero"', 'STRING'],
    [')', 'KEY'],
    ['\n', 'LINE_JUMP'],
    ['\n', 'LINE_JUMP'],
    ['# Cuarto comentario', 'COMMENT'],
    ['\n', 'LINE_JUMP'],
    ['while', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['True', 'RESERVED'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['break', 'RESERVED'],
    ['\n', 'LINE_JUMP'],
    ['\n', 'LINE_JUMP'],
    ['# Quinto comentario', 'COMMENT'],
    ['\n', 'LINE_JUMP'],
    ['class', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['MiClase', 'VARIABLE'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['def', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['__init__', 'VARIABLE'],
    ['(', 'KEY'],
    ['self', 'VARIABLE'],
    [',', 'PUNCTUATION'],
    ['&nbsp', 'SPACE'],
    ['valor', 'VARIABLE'],
    [')', 'KEY'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['self', 'VARIABLE'],
    ['.', 'PUNCTUATION'],
    ['valor', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['=', 'ASSIGNMENT'],
    ['&nbsp', 'SPACE'],
    ['valor', 'VARIABLE'],
    ['\n', 'LINE_JUMP'],
    ['\n', 'LINE_JUMP'],
    ['def', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['metodo', 'VARIABLE'],
    ['(', 'KEY'],
    ['self', 'VARIABLE'],
    [')', 'KEY'],
    [':', 'PUNCTUATION'],
    ['\n', 'LINE_JUMP'],
    ['&nbsp', 'SPACE'],
    ['&nbsp', 'SPACE'],
    ['return', 'RESERVED'],
    ['&nbsp', 'SPACE'],
    ['self', 'VARIABLE'],
    ['.', 'PUNCTUATION'],
    ['valor', 'VARIABLE'],
    ['\n', 'LINE_JUMP'],
    ['\n', 'LINE_JUMP'],
    ['obj', 'VARIABLE'],
    ['&nbsp', 'SPACE'],
    ['=', 'ASSIGNMENT'],
    ['&nbsp', 'SPACE'],
    ['MiClase', 'VARIABLE'],
    ['(', 'KEY'],
    ['"Hola"', 'STRING'],
    [')', 'KEY'],
    ['\n', 'LINE_JUMP'],
    ['print', 'RESERVED'],
    ['(', 'KEY'],
    ['obj', 'VARIABLE'],
    ['.', 'PUNCTUATION'],
    ['metodo', 'VARIABLE'],
    ['(', 'KEY'],
    [')', 'KEY'],
    [')', 'KEY'],
    ['\n', 'LINE_JUMP'],
]

def highlighter(results):
    html_generator(results, color_types, "SintaxisHighlighter.html")


def main():
    # Se genera el HTML con al función
    highlighter(results)




if __name__ == "__main__":
    main()